void RR(){
    int time=0,compleated=0;
    while(compleated<n){
        for(int i=0;i<n;i++){
            if(p[i].at<time && p[i].tempBT!=0){
                printf("|%d %s",time,p[i].pname);
                if(p[i].tempBT>TQ){
                    time+=p[i].tempBT;
                    p[i].tempBT-=TQ;
                }else{
                    time+=p[i].tempBT;
                    p[i].ct=time;
                    p[i].tempBT=0;
                    compleated++
                }
                printf("%d|",time);
            }
        }
    }
}
//for sjf np
int time;
int get_next_process() {
    int m = -1;
    for (int i = 0; i < n; i++) {
        // Check if the process has arrived and is not completed
        if (p[i].at <= time && p[i].remaining_bt > 0) {
            // If no process is selected yet or this one has a shorter remaining time
            if (m == -1 || p[i].remaining_bt < p[m].remaining_bt) {
                m = i;  // Select this process
            }
        }
    }
    return m;  // Return the index of the m process
}

void sjf_non_preemptive() {
    int time = 0, completed = 0;
    while (completed < n) {
        int index = get_next_process();
        if (index == -1) {
            time++;
        } else {
            time += p[index].remaining_bt;
            p[index].ct = time;
            p[index].remaining_bt = 0;
            completed++;
        }
    }
}
//fcfs
void fcfs(){
    int time=0;
    for(int i=0;i<n;i++){
        if(p[i].At>time){
            printf("|%d #",time);
            time=p[i].at;
        }
        printf("|%d %s",time,p[i].pname);
        time+=p[i].tempBT;
        printf("%d|",time);
        p[i].ct=time;
        
    }
}
//preemtive priority
printf("\ngantt chart");
int compleated=0;
while(compleated<n){
    int minp=99,mini=-1;
    for(int i=0;i<n;i++){
        if(p[i].at<time && p[i].tempBT!=0 && p[i].p<minp){
            minp=p[i].p;
            mini=i;
        }

        if(mini==-1){
            time++;
            printf("|%d # %d",time-1,time)
        }
        else{
            time++;
            p[mini].tempBT--;
            printf("|%d %s %d",time-1,p[mini].pname,time);
            if(p[mini].tempBT==0){
                p[mini].ct=time;
                compleated++;
            }
        }
    }
}